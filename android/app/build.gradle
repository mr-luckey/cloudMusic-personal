def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    // throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '9'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '9.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


android {
    compileSdkVersion 34
    ndkVersion "27.0.12077973"
    // buildToolsVersion "30.0.3"
    namespace 'com.appware.cloudSpot'

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.appware.cloudSpot"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        multiDexEnabled false
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
//        useProguard true


        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            useProguard true
            minifyEnabled true
            shrinkResources true
//            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

    }


    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    buildFeatures {
        viewBinding true
    }
//    namespace 'com.appware.cloudSpot'
}

flutter {
    source '../..'
}

dependencies {

//     implementation 'com.android.tools.build:gradle:4.2.0'
    implementation 'com.google.android.gms:play-services-measurement-api:21.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // implementation'com.google.android.gms:play-services-measurement:21.5.1'
    implementation 'com.google.android.gms:play-services-ads:23.2.0'
//     {
//     exclude group: 'com.google.android.gms', module: 'play-services-measurement-base'
// }

    // implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    
    // implementation platform('com.google.firebase:firebase-bom:30.1.0')
}
